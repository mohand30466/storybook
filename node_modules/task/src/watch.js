const { isAbsolute, join } = require('path')
const execTask = require('./util/exec-task')
const chokidar = require('chokidar')
const bs = require('stamp')
const fs = require('fs')
const watching = {}
var watcher

const onchange = file => {
  const listeners = watching[file]
  const stamp = bs.create()
  let i = listeners.length
  while (i--) execTask(listeners[i], stamp)
}

const listen = (file, task) => fs.stat(file, (err, status) => {
  if (err) return
  if (status.isDirectory()) {
    fs.readdir(file, (err, files) => {
      if (err) return
      let i = files.length
      while (i--) listen(join(file, files[i]), task)
    })
  } else {
    fs.realpath(file, (err, file) => {
      if (err) return
      const listeners = watching[file] || (watching[file] = [])
      if (listeners.indexOf(task) === -1) {
        listeners.push(task)
        if (watcher) {
          watcher.add(file)
        } else {
          watcher = chokidar.watch(file, {
            ignoreInitial: true
          }).on('change', onchange)
        }
      }
    })
  }
})

const unlisten = (file, task) => fs.stat(file, (err, status) => {
  if (err) return
  if (status.isDirectory()) {
    fs.readdir(file, (err, files) => {
      if (err) return
      let i = files.length
      while (i--) unlisten(join(file, files[i]), task)
    })
  } else {
    fs.realpath(file, (err, file) => {
      if (err) return
      const listeners = watching[file]
      if (listeners && task.entry !== file) {
        listeners.splice(listeners.indexOf(task), 1)
        if (!listeners.length) {
          watcher.unwatch(file)
          delete watching[file]
        }
      }
    })
  }
})

exports.props = {
  watch: {
    props: {
      default: {
        on: (val, stamp, file) => {
          const task = file.parent().parent()
          const cwd = task.root().cwd
          if (!isAbsolute(file = file.compute())) {
            file = join(cwd, file)
          }
          if (val) {
            listen(file, task)
          } else {
            unlisten(file, task)
          }
        }
      }
    }
  }
}
