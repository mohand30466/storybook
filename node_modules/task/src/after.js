const getFn = require('./util/get-fn')
const DONE_COMPUTE = ['done', 'compute']
const DONE = ['done']

exports.props = {
  after: {
    on (val, stamp, after) {
      const task = after.parent()
      const fn = getFn(task)
      if (fn) {
        task.set((task, ploy, cwd) => {
          const aftertasks = after.serialize()
          const tasks = task.parent()
          const afterall = (val, stamp, d) => {
            const alldone = aftertasks.every(key => Array.isArray(key)
              ? tasks.get(key.concat(DONE_COMPUTE))
              : tasks.get([key, 'done', 'compute'])
            )
            if (alldone) {
              if (fn) {
                task.set({ done: false }, false)
                task.set(fn(task, ploy, cwd), stamp)
              }
            }
          }
          aftertasks.forEach(key => {
            const done = Array.isArray(key)
              ? tasks.get(key.concat(DONE), {})
              : tasks.get([key, 'done'], {})
            done.on(afterall, after.path().join('.'))
            afterall(done.compute(), stamp)
          })
        }, stamp)
      } else {
        after.root().emit('error', `after used, but no val found! ${after.path()}`)
      }
    }
  }
}
