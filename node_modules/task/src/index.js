const h = require('hub.js')
const getFn = require('./util/get-fn')
const getCwd = require('./util/get-cwd')
const findPort = require('./util/find-port')
const getIp = require('./util/get-ip')

const inject = [
  require('./done'),
  require('./after'),
  require('./watch'),
  require('./restart'),
  require('./log'),
  { props: { cwd: true } }
]

const typeFix = original => {
  const replacement = { inject }
  if (original.inject) {
    if (Array.isArray(original.inject)) {
      replacement.inject = inject.concat(original.inject)
    } else {
      replacement.inject.push(original.inject)
    }
  }
  return Object.assign(replacement, original)
}

const hub = h({
  inject,
  types: {
    tasks: {
      props: {
        default: {
          tasks: { type: 'tasks' },
          inject
        }
      },
      inject (t) {
        const prop = t.props.default
        const props = {
          default: (t, val, key, stamp) => {
            if (val.type) val = typeFix(val)
            const beforeFn = getFn(t[key])
            const changed = prop(t, val, key, stamp)
            const task = t[key]
            const afterFn = getFn(task)
            if (afterFn && afterFn !== beforeFn && typeof afterFn === 'function') {
              task.set(afterFn(task, hub, getCwd(task)))
            }
            return changed
          }
        }
        t.set({ props }, false)
      }
    }
  },
  props: {
    cwd: true,
    tasks: { type: 'tasks' }
  },
  _uid_: 'task-hub',
  cwd: process.cwd(),
  port: findPort(3000).then(port => {
    process.env.PLOY_TASK_HUB = `ws://${getIp()}:${port}`
    return port
  }),
  on: {
    error: {
      broadcast: (val, stamp, t) => {
        // console.log('BROADCAST ♨️♨️♨️')
        t.broadcast('error', val, stamp)
      }
    }
  }
})

module.exports = hub

process.on('exit', () => (process.PLOY_TASK_HUB = null))
process.on('SIGINT', () => process.exit(2))
process.on('uncaughtException', e => {
  console.log(e.stack)
  process.exit(99)
})
