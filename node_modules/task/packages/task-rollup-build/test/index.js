const fs = require('fs')
const test = require('tape')
const ploy = require('../../../')
const { join } = require('path')
const taskRollup = require('../')

test.onFinish(() => process.exit())

test('simple rollup build (with cwd)', { timeout: 1000 }, t => {
  ploy.set({
    cwd: __dirname,
    tasks: {
      inject: [ taskRollup ],
      simpleBuild: {
        type: 'rollup-build',
        options: {
          entry: 'files/a.js'
        }
      }
    }
  })

  t.plan(2)

  const simpleBuild = ploy.get(['tasks', 'simpleBuild'], {})

  simpleBuild.get(['result', 'es', 'code'], {})
    .once(code => code.compute() === 'console.log(\'hello world\');\n')
    .then(code => t.pass('output build code'))

  simpleBuild.get('done', {})
    .once(done => done.compute())
    .then(done => t.pass('set done'))
})

test('rollup build with plugins', { timeout: 1000 }, t => {
  ploy.set({
    cwd: __dirname,
    tasks: {
      inject: [ taskRollup ],
      pluginBuild: {
        type: 'rollup-build',
        options: {
          entry: 'files/a.js',
          plugins: [{
            transform: code => code.replace('hello', 'bye')
          }]
        }
      }
    }
  })

  t.plan(2)

  const pluginBuild = ploy.get(['tasks', 'pluginBuild'], {})

  pluginBuild.get(['result', 'es', 'code'], {})
    .once(code => code.compute() === 'console.log(\'bye world\');\n')
    .then(code => t.pass('transformed build code'))

  pluginBuild.get('done', {})
    .once(done => done.compute())
    .then(done => {
      t.pass('set done to true')
      ploy.tasks.set({}, false, true)
    })
})

test('simple rollup build with envs', { timeout: 1000 }, t => {
  const intro = 'var process = process || { env: {} };\nprocess.env.TEST_ENV = \'yay\';'
  ploy.set({
    cwd: __dirname,
    tasks: {
      inject: [ taskRollup ],
      simpleBuild: {
        type: 'rollup-build',
        options: {
          entry: 'files/a.js',
          intro: {
            val: 'var process = process || { env: {} };\nprocess.env.TEST_ENV = ',
            $transform: val => val + '\'yay\';'
          }
        }
      }
    }
  })

  t.plan(1)

  const simpleBuild = ploy.get(['tasks', 'simpleBuild'], {})

  simpleBuild.get(['result', 'es', 'code'], {})
    .once(code => code.compute() === intro + '\n\nconsole.log(\'hello world\');\n')
    .then(code => t.pass('output build code'))
})
