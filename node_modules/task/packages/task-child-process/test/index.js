const test = require('tape')
const ploy = require('../../../')
const net = require('net')
const childProcess = require('../')

const freeport = port => new Promise(resolve => {
  const server = net.createServer()
  server.on('error', e => resolve(freeport(++port)))
  server.listen(port, e => {
    server.once('close', () => resolve(port))
    server.close()
  })
})

test.onFinish(() => process.exit())

test('run command', { timeout: 1000 }, t => {
  t.plan(3)

  ploy.set({
    cwd: __dirname,
    tasks: {
      inject: [ childProcess ],
      runRandomCommand: {
        type: 'child-process',
        options: {
          cmd: 'pwd'
        }
      }
    }
  })

  const log = ploy.get(['tasks', 'runRandomCommand', 'log'], {})
  log.once(log => log.keys().find(i => log[i].compute().trim() === __dirname))
    .then(done => {
      t.pass('print correct output')
    })

  const done = ploy.get(['tasks', 'runRandomCommand', 'done'], {})
  var previous
  done.once(done => (previous = done.compute()))
    .then(done => t.pass('set done to true'))
    .then(() => ploy.tasks.runRandomCommand.set({ restart: true }))
    .then(() => done.once(done => previous !== done.compute()))
    .then(() => t.pass('gets done after restart'))
    .then(() => ploy.tasks.set({}, false, true))
})

test('run and kill command', { timeout: 2000 }, t => {
  freeport(3000).then(port => {
    t.plan(1)

    ploy.set({
      cwd: __dirname,
      tasks: {
        inject: [ childProcess ],
        runServer: {
          type: 'child-process',
          options: {
            cmd: `node files/error`
          },
          log: {
            on () {
              t.pass('logs error')
              ploy.tasks.set({}, false, true)
            }
          }
        }
      }
    })
  })
})

test('run command twice', { timeout: 2000 }, t => {
  freeport(3000).then(port => {
    ploy.on('error', () => t.fail('error!'))
    ploy.set({
      cwd: __dirname,
      tasks: {
        inject: [ childProcess ],
        runServer: {
          type: 'child-process',
          options: {
            cmd: `node files/server ${port}`
          }
        }
      }
    })

    t.plan(1)

    setTimeout(() => {
      ploy.tasks.runServer.set({ restart: true })
      setTimeout(() => {
        t.pass('server restarted cleanly')
        ploy.tasks.set({}, false, true)
      }, 500)
    }, 1)
  })
})
