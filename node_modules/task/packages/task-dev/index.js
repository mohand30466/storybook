const createServer = (port, live) => {
  const http = require('http')
  const fs = require('fs')
  const { parse, join } = require('path')
  const os = require('os')
  const externalIPv4 = ({ family, internal }) => family === 'IPv4' && !internal
  const getIP = () => {
    const ifaces = os.networkInterfaces()
    for (const i in ifaces) {
      const iface = ifaces[i].find(externalIPv4)
      if (iface) return iface.address
    }
    return 'localhost'
  }
  console.log('start dev server on', port, 'reload', live)
  return http.createServer((req, res) => {
    const parsed = parse(req.url)
    try {
      if (~req.url.indexOf('favicon')) {
        res.end('')
      } else if (!parsed.base) {
        res.setHeader('content-type', 'text/html')
        res.end('<html><head><meta charset=\'utf-8\'><title>DEV-SERVER</title><script src=\'http://' + getIP() + ':' + live + '\'></script></head><body><script src=\'dist/index.inline.js\'></script></body></html>')
      } else {
        res.setHeader('content-type', parsed.ext === '.css'
      ? 'text/css'
      : 'text/javascript'
    )
        fs.readFile('.' + join(parsed.dir, parsed.base), (err, data) => {
          if (!err) {
            res.end(data)
          } else {
            res.end('err - ' + err.message)
          }
        })
      }
    } catch (e) {
      res.end('err')
    }
  }).listen(port)
}

const arg = (...args) => {
  var i = args.length
  while (i--) {
    const arg = args[i]
    if (~process.argv.indexOf(arg)) {
      const result = process.argv[process.argv.indexOf(arg) + 1]
      return !result || result[0] === '-' ? true : result
    }
  }
}

// add custom index.html feature
// pre-render feature

const dest = arg('-d', '--dist') || 'dist/index.js'
const entry = arg('-e', '--entry') || 'src/index.js'
const port = arg('-p', '--port') || 8080
const raw = arg('-r', '--raw') || false

exports.inject = [
  require('../task-free-port'),
  require('../task-build-js'),
  require('../task-child-process'),
  require('../task-livereload')
]

exports.tasks = {
  'app-port': { type: 'free-port' },
  'build-app': {
    type: 'build-js',
    options: {
      entry,
      dest,
      targets: [ 'inline' ],
      raw
    },
    done: {
      on (val, stamp, done) {
        done.parent(2).root().set({
          tasks: {
            reload: { done: true }
          }
        }, stamp)
      }
    }
  },
  'serve-app': {
    type: 'child-process',
    after: [ 'livereload-server' ],
    options: {
      cmd: {
        val: `node -e "(${createServer.toString()})(${port}, livereload-server)"`,
        $transform: (val, t) => {
          return val.replace('livereload-server', t.parent(3).get('livereload-server').result.compute())
        }
      }
    }
  }
}
