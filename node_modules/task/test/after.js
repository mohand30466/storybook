const test = require('tape')
const ploy = require('../')

test('use after property', t => {
  ploy.get('tasks', {}).set({
    afterOneAndTwo: {
      val: () => new Promise(resolve => resolve({ done: true })),
      after: [ 'one', 'two' ]
    },
    one: () => new Promise(resolve => {
      resolve({
        done: true
      })
    }),
    two: () => new Promise(resolve => setTimeout(() => resolve({ done: true }), 100))
  })

  t.plan(2)

  ploy.get(['tasks', 'one', 'done'], {})
    .once(done => done.compute())
    .then(val => {
      t.notEquals(
        typeof ploy.get(['tasks', 'afterOneAndTwo', 'done', 'compute']),
        'number',
        'afterOneAndTwo did not exec before one'
      )
      ploy.get(['tasks', 'two', 'done'], {})
        .once(done => done.compute())
        .then(val => t.equals(
          typeof ploy.get(['tasks', 'afterOneAndTwo', 'done', 'compute']),
          'number',
          'afterOneAndTwo execs after two'
        ))
        .then(() => ploy.tasks.set({}, false, true))
    })
})

// test('use serialize + after', { timeout: 500 }, t => {
//   t.plan(1)

//   ploy.get('tasks', {}).set({
//     one: () => new Promise(resolve => resolve({
//       result: 'xxx',
//       done: true
//     })),
//     two: {
//       val: task => new Promise(resolve => resolve({
//         result: task.get('options', {}).serialize(true),
//         done: true
//       })),
//       options: {
//         val: [ '@', 'root', 'tasks', 'one', 'result' ],
//         $transform: val => val + '!'
//       },
//       after: [ 'one' ]
//     }
//   })

//   ploy.get(['tasks', 'two', 'result'], {})
//   .once(val => val.val === 'xxx!')
//   .then(() => t.pass('correct output'))
// })

// test('use after paths', { timeout: 500 }, t => {
//   t.plan(1)

//   ploy.get('tasks', {}).set({
//     bla: {
//       tasks: {
//         one: () => new Promise(resolve => resolve({
//           result: 'xxx',
//           done: true
//         }))
//       }
//     },
//     foo: {
//       val: task => new Promise(resolve => resolve({
//         result: task.get('options', {}).serialize(true),
//         done: true
//       })),
//       options: {
//         val: [ '@', 'root', 'tasks', 'bla', 'tasks', 'one', 'result' ],
//         $transform: val => val + '!'
//       },
//       after: [ ['bla', 'tasks', 'one'] ]
//     }
//   })

//   ploy.get(['tasks', 'foo', 'result'], {})
//   .once(val => val.val === 'xxx!')
//   .then(() => t.pass('correct output'))
// })